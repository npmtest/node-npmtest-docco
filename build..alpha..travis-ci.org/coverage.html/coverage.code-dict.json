{"/home/travis/build/npmtest/node-npmtest-docco/test.js":"/* istanbul instrument in package npmtest_docco */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-docco/lib.npmtest_docco.js":"/* istanbul instrument in package npmtest_docco */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_docco = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_docco = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-docco/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-docco && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_docco */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_docco\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_docco.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_docco.rollup.js'] =\n            local.assetsDict['/assets.npmtest_docco.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_docco.__dirname + '/lib.npmtest_docco.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-docco/node_modules/docco/docco.js":"// Generated by CoffeeScript 1.9.0\n(function() {\n  var Docco, buildMatchers, commander, configure, defaults, document, format, fs, getLanguage, highlightjs, languages, marked, parse, path, run, version, write, _,\n    __slice = [].slice;\n\n  document = function(options, callback) {\n    var config;\n    if (options == null) {\n      options = {};\n    }\n    config = configure(options);\n    return fs.mkdirs(config.output, function() {\n      var complete, copyAsset, files, nextFile;\n      callback || (callback = function(error) {\n        if (error) {\n          throw error;\n        }\n      });\n      copyAsset = function(file, callback) {\n        if (!fs.existsSync(file)) {\n          return callback();\n        }\n        return fs.copy(file, path.join(config.output, path.basename(file)), callback);\n      };\n      complete = function() {\n        return copyAsset(config.css, function(error) {\n          if (error) {\n            return callback(error);\n          }\n          if (fs.existsSync(config[\"public\"])) {\n            return copyAsset(config[\"public\"], callback);\n          }\n          return callback();\n        });\n      };\n      files = config.sources.slice();\n      nextFile = function() {\n        var source;\n        source = files.shift();\n        return fs.readFile(source, function(error, buffer) {\n          var code, sections;\n          if (error) {\n            return callback(error);\n          }\n          code = buffer.toString();\n          sections = parse(source, code, config);\n          format(source, sections, config);\n          write(source, sections, config);\n          if (files.length) {\n            return nextFile();\n          } else {\n            return complete();\n          }\n        });\n      };\n      return nextFile();\n    });\n  };\n\n  parse = function(source, code, config) {\n    var codeText, docsText, hasCode, i, isText, lang, line, lines, match, maybeCode, save, sections, _i, _j, _len, _len1;\n    if (config == null) {\n      config = {};\n    }\n    lines = code.split('\\n');\n    sections = [];\n    lang = getLanguage(source, config);\n    hasCode = docsText = codeText = '';\n    save = function() {\n      sections.push({\n        docsText: docsText,\n        codeText: codeText\n      });\n      return hasCode = docsText = codeText = '';\n    };\n    if (lang.literate) {\n      isText = maybeCode = true;\n      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {\n        line = lines[i];\n        lines[i] = maybeCode && (match = /^([ ]{4}|[ ]{0,3}\\t)/.exec(line)) ? (isText = false, line.slice(match[0].length)) : (maybeCode = /^\\s*$/.test(line)) ? isText ? lang.symbol : '' : (isText = true, lang.symbol + ' ' + line);\n      }\n    }\n    for (_j = 0, _len1 = lines.length; _j < _len1; _j++) {\n      line = lines[_j];\n      if (line.match(lang.commentMatcher) && !line.match(lang.commentFilter)) {\n        if (hasCode) {\n          save();\n        }\n        docsText += (line = line.replace(lang.commentMatcher, '')) + '\\n';\n        if (/^(---+|===+)$/.test(line)) {\n          save();\n        }\n      } else {\n        hasCode = true;\n        codeText += line + '\\n';\n      }\n    }\n    save();\n    return sections;\n  };\n\n  format = function(source, sections, config) {\n    var code, i, language, markedOptions, section, _i, _len, _results;\n    language = getLanguage(source, config);\n    markedOptions = {\n      smartypants: true\n    };\n    if (config.marked) {\n      markedOptions = config.marked;\n    }\n    marked.setOptions(markedOptions);\n    marked.setOptions({\n      highlight: function(code, lang) {\n        lang || (lang = language.name);\n        if (highlightjs.getLanguage(lang)) {\n          return highlightjs.highlight(lang, code).value;\n        } else {\n          console.warn(\"docco: couldn't highlight code block with unknown language '\" + lang + \"' in \" + source);\n          return code;\n        }\n      }\n    });\n    _results = [];\n    for (i = _i = 0, _len = sections.length; _i < _len; i = ++_i) {\n      section = sections[i];\n      code = highlightjs.highlight(language.name, section.codeText).value;\n      code = code.replace(/\\s+$/, '');\n      section.codeHtml = \"<div class='highlight'><pre>\" + code + \"</pre></div>\";\n      _results.push(section.docsHtml = marked(section.docsText));\n    }\n    return _results;\n  };\n\n  write = function(source, sections, config) {\n    var destination, first, firstSection, hasTitle, html, title;\n    destination = function(file) {\n      return path.join(config.output, path.basename(file, path.extname(file)) + '.html');\n    };\n    firstSection = _.find(sections, function(section) {\n      return section.docsText.length > 0;\n    });\n    if (firstSection) {\n      first = marked.lexer(firstSection.docsText)[0];\n    }\n    hasTitle = first && first.type === 'heading' && first.depth === 1;\n    title = hasTitle ? first.text : path.basename(source);\n    html = config.template({\n      sources: config.sources,\n      css: path.basename(config.css),\n      title: title,\n      hasTitle: hasTitle,\n      sections: sections,\n      path: path,\n      destination: destination\n    });\n    console.log(\"docco: \" + source + \" -> \" + (destination(source)));\n    return fs.writeFileSync(destination(source), html);\n  };\n\n  defaults = {\n    layout: 'parallel',\n    output: 'docs',\n    template: null,\n    css: null,\n    extension: null,\n    languages: {},\n    marked: null\n  };\n\n  configure = function(options) {\n    var config, dir;\n    config = _.extend({}, defaults, _.pick.apply(_, [options].concat(__slice.call(_.keys(defaults)))));\n    config.languages = buildMatchers(config.languages);\n    if (options.template) {\n      if (!options.css) {\n        console.warn(\"docco: no stylesheet file specified\");\n      }\n      config.layout = null;\n    } else {\n      dir = config.layout = path.join(__dirname, 'resources', config.layout);\n      if (fs.existsSync(path.join(dir, 'public'))) {\n        config[\"public\"] = path.join(dir, 'public');\n      }\n      config.template = path.join(dir, 'docco.jst');\n      config.css = options.css || path.join(dir, 'docco.css');\n    }\n    config.template = _.template(fs.readFileSync(config.template).toString());\n    if (options.marked) {\n      config.marked = JSON.parse(fs.readFileSync(options.marked));\n    }\n    config.sources = options.args.filter(function(source) {\n      var lang;\n      lang = getLanguage(source, config);\n      if (!lang) {\n        console.warn(\"docco: skipped unknown type (\" + (path.basename(source)) + \")\");\n      }\n      return lang;\n    }).sort();\n    return config;\n  };\n\n  _ = require('underscore');\n\n  fs = require('fs-extra');\n\n  path = require('path');\n\n  marked = require('marked');\n\n  commander = require('commander');\n\n  highlightjs = require('highlight.js');\n\n  languages = JSON.parse(fs.readFileSync(path.join(__dirname, 'resources', 'languages.json')));\n\n  buildMatchers = function(languages) {\n    var ext, l;\n    for (ext in languages) {\n      l = languages[ext];\n      l.commentMatcher = RegExp(\"^\\\\s*\" + l.symbol + \"\\\\s?\");\n      l.commentFilter = /(^#![/]|^\\s*#\\{)/;\n    }\n    return languages;\n  };\n\n  languages = buildMatchers(languages);\n\n  getLanguage = function(source, config) {\n    var codeExt, codeLang, ext, lang, _ref;\n    ext = config.extension || path.extname(source) || path.basename(source);\n    lang = ((_ref = config.languages) != null ? _ref[ext] : void 0) || languages[ext];\n    if (lang && lang.name === 'markdown') {\n      codeExt = path.extname(path.basename(source, ext));\n      if (codeExt && (codeLang = languages[codeExt])) {\n        lang = _.extend({}, codeLang, {\n          literate: true\n        });\n      }\n    }\n    return lang;\n  };\n\n  version = JSON.parse(fs.readFileSync(path.join(__dirname, 'package.json'))).version;\n\n  run = function(args) {\n    var c;\n    if (args == null) {\n      args = process.argv;\n    }\n    c = defaults;\n    commander.version(version).usage('[options] files').option('-L, --languages [file]', 'use a custom languages.json', _.compose(JSON.parse, fs.readFileSync)).option('-l, --layout [name]', 'choose a layout (parallel, linear or classic)', c.layout).option('-o, --output [path]', 'output to a given folder', c.output).option('-c, --css [file]', 'use a custom css file', c.css).option('-t, --template [file]', 'use a custom .jst template', c.template).option('-e, --extension [ext]', 'assume a file extension for all inputs', c.extension).option('-m, --marked [file]', 'use custom marked options', c.marked).parse(args).name = \"docco\";\n    if (commander.args.length) {\n      return document(commander);\n    } else {\n      return console.log(commander.helpInformation());\n    }\n  };\n\n  Docco = module.exports = {\n    run: run,\n    document: document,\n    parse: parse,\n    format: format,\n    version: version\n  };\n\n}).call(this);\n"}